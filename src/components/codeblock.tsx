"use client";
import { useCopyButton } from "fumadocs-ui/utils/use-copy-button";
import { Check, Clipboard } from "lucide-react";
import {
  type ComponentProps,
  createContext,
  type HTMLAttributes,
  type ReactNode,
  type RefObject,
  useContext,
  useMemo,
  useRef,
} from "react";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/tabs.unstyled";
import { buttonVariants } from "@/components/ui/button";
import { cn } from "@/lib/cn";
import { mergeRefs } from "@/lib/merge-refs";

export interface CodeBlockProps extends ComponentProps<"figure"> {
  /**
   * Icon of code block
   *
   * When passed as a string, it assumes the value is the HTML of icon
   */
  icon?: ReactNode;

  /**
   * Allow to copy code with copy button
   *
   * @defaultValue true
   */
  allowCopy?: boolean;

  /**
   * Keep original background color generated by Shiki or Rehype Code
   *
   * @defaultValue false
   */
  keepBackground?: boolean;

  viewportProps?: HTMLAttributes<HTMLElement>;

  /**
   * show line numbers
   */
  "data-line-numbers"?: boolean;

  /**
   * @defaultValue 1
   */
  "data-line-numbers-start"?: number;

  Actions?: (props: { className?: string; children?: ReactNode }) => ReactNode;
}

const TabsContext = createContext<{
  containerRef: RefObject<HTMLDivElement | null>;
  nested: boolean;
} | null>(null);

export function Pre(props: ComponentProps<"pre">) {
  return (
    <pre
      {...props}
      className={cn("w-max min-w-full *:flex *:flex-col", props.className)}
    >
      {props.children}
    </pre>
  );
}

export function CodeBlock({
  ref,
  title,
  allowCopy = true,
  keepBackground = false,
  icon,
  viewportProps = {},
  children,
  Actions = (actionProps) => (
    <div
      {...actionProps}
      className={cn("empty:hidden", actionProps.className)}
    />
  ),
  ...props
}: CodeBlockProps) {
  const inTab = useContext(TabsContext) !== null;
  const areaRef = useRef<HTMLDivElement>(null);

  return (
    <figure
      dir="ltr"
      ref={ref}
      {...props}
      className={cn(
        inTab
          ? "-mx-px -mb-px bg-fd-secondary last:rounded-b-xl"
          : "my-4 rounded-xl bg-fd-card",
        keepBackground && "bg-(--shiki-light-bg) dark:bg-(--shiki-dark-bg)",

        "shiki not-prose relative overflow-hidden border text-sm shadow-sm outline-none",
        props.className
      )}
    >
      {title ? (
        <div className="flex h-9.5 items-center gap-2 border-b px-4 text-fd-muted-foreground">
          {typeof icon === "string" ? (
            <div
              className="[&_svg]:size-3.5"
              // biome-ignore lint/security/noDangerouslySetInnerHtml: html is safe
              dangerouslySetInnerHTML={{
                __html: icon,
              }}
            />
          ) : (
            icon
          )}
          <figcaption className="flex-1 truncate">{title}</figcaption>
          {Actions({
            className: "-me-2",
            children: allowCopy && <CopyButton containerRef={areaRef} />,
          })}
        </div>
      ) : (
        Actions({
          className:
            "absolute top-2 right-2 z-2 backdrop-blur-lg rounded-lg text-fd-muted-foreground",
          children: allowCopy && <CopyButton containerRef={areaRef} />,
        })
      )}
      <div
        ref={areaRef}
        {...viewportProps}
        className={cn(
          "fd-scroll-container max-h-[600px] overflow-auto py-3.5 text-[13px]",
          viewportProps.className
        )}
        style={
          {
            // space for toolbar
            "--padding-right": title ? undefined : "calc(var(--spacing) * 8)",
            counterSet: props["data-line-numbers"]
              ? `line ${Number(props["data-line-numbers-start"] ?? 1) - 1}`
              : undefined,
            ...viewportProps.style,
          } as object
        }
      >
        {children}
      </div>
    </figure>
  );
}

function CopyButton({
  className,
  containerRef,
  ...props
}: ComponentProps<"button"> & {
  containerRef: RefObject<HTMLElement | null>;
}) {
  const [checked, onClick] = useCopyButton(async () => {
    const pre = containerRef.current?.getElementsByTagName("pre").item(0);
    if (!pre) {
      return;
    }
    const clone = pre.cloneNode(true) as HTMLElement;
    for (const node of clone.querySelectorAll(".nd-copy-ignore")) {
      node.replaceWith("\n");
    }

    await navigator.clipboard.writeText(clone.textContent ?? "");
  });

  return (
    <button
      aria-label={checked ? "Copied Text" : "Copy Text"}
      className={cn(
        buttonVariants({
          className: "hover:text-fd-accent-foreground",
          size: "icon-xs",
        }),
        className
      )}
      onClick={onClick}
      type="button"
      {...props}
    >
      {checked ? <Check /> : <Clipboard />}
    </button>
  );
}

export function CodeBlockTabs({ ref, ...props }: ComponentProps<typeof Tabs>) {
  const containerRef = useRef<HTMLDivElement>(null);
  const nested = useContext(TabsContext) !== null;

  return (
    <Tabs
      ref={mergeRefs(containerRef, ref)}
      {...props}
      className={cn(
        "rounded-xl border bg-fd-card",
        !nested && "my-4",
        props.className
      )}
    >
      <TabsContext.Provider
        value={useMemo(
          () => ({
            containerRef,
            nested,
          }),
          [nested]
        )}
      >
        {props.children}
      </TabsContext.Provider>
    </Tabs>
  );
}

export function CodeBlockTabsList(props: ComponentProps<typeof TabsList>) {
  return (
    <TabsList
      {...props}
      className={cn(
        "flex flex-row overflow-x-auto px-2 text-fd-muted-foreground",
        props.className
      )}
    >
      {props.children}
    </TabsList>
  );
}

export function CodeBlockTabsTrigger({
  children,
  ...props
}: ComponentProps<typeof TabsTrigger>) {
  return (
    <TabsTrigger
      {...props}
      className={cn(
        "group relative inline-flex items-center gap-2 text-nowrap px-2 py-1.5 font-medium text-sm transition-colors hover:text-fd-accent-foreground data-[state=active]:text-fd-primary [&_svg]:size-3.5",
        props.className
      )}
    >
      <div className="absolute inset-x-2 bottom-0 h-px group-data-[state=active]:bg-fd-primary" />
      {children}
    </TabsTrigger>
  );
}

// TODO: currently Vite RSC plugin has problem with `asChild` due to children is automatically wrapped in <Fragment />, maybe revisit this in future
export function CodeBlockTab(props: ComponentProps<typeof TabsContent>) {
  return <TabsContent {...props} />;
}
